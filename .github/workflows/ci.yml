name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  # Windows Build with Visual Studio
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 60
    strategy:
      matrix:
        build_type: [Debug, Release]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        
    - name: Setup Visual Studio
      uses: microsoft/setup-msbuild@v2
      
    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_SAMPLES=ON -DBUILD_TESTING=ON -DDUCKX_USE_SYSTEM_ABSL=OFF -DDUCKX_ENABLE_ABSL=ON
        
    - name: Build with Verbose Output
      run: |
        cmake --build build --config ${{ matrix.build_type }} --parallel --verbose
        
    - name: Check Build Artifacts (Windows)
      run: |
        echo "=== Checking build directory structure ==="
        Get-ChildItem -Recurse build -Include "*.exe", "*.lib", "*.dll" | Select-Object FullName -First 20
        echo "=== Checking for test executable ==="
        Get-ChildItem -Recurse build\test -Include "run_gtests*" | Select-Object FullName
      shell: powershell
        
    - name: Run Tests
      run: |
        cd build
        ctest --build-config ${{ matrix.build_type }} --output-on-failure --verbose
        
    - name: Run Unified Test Suite
      run: |
        cd build
        cmake --build . --target run_gtests --config ${{ matrix.build_type }}
        cd test
        # For Visual Studio builds, executable is in Debug/Release subdirectory
        if [ -f "./${{ matrix.build_type }}/run_gtests.exe" ]; then
          ./${{ matrix.build_type }}/run_gtests.exe --gtest_brief=1
        elif [ -f "./run_gtests.exe" ]; then
          ./run_gtests.exe --gtest_brief=1
        elif [ -f "./run_gtests" ]; then
          ./run_gtests --gtest_brief=1
        else
          echo "❌ Test executable not found"
          echo "Looking in current directory:"
          ls -la
          echo "Looking in Debug directory:"
          ls -la Debug/ 2>/dev/null || echo "No Debug directory"
          echo "Looking in Release directory:"
          ls -la Release/ 2>/dev/null || echo "No Release directory"
          exit 1
        fi
      shell: bash

  # Linux Build with GCC
  build-linux:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        
    - name: Cache APT packages
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential ninja-build
        
    - name: Setup Compiler
      run: |
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
        elif [ "${{ matrix.compiler }}" = "clang" ]; then
          sudo apt-get install -y clang
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
        fi
        
    - name: Configure CMake with Abseil
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DBUILD_SAMPLES=ON \
          -DBUILD_TESTING=ON \
          -DDUCKX_USE_SYSTEM_ABSL=OFF \
          -DDUCKX_ENABLE_ABSL=ON \
          -G Ninja
        
    - name: Build with Verbose Output
      run: |
        cmake --build build --parallel --verbose
        
    - name: Check Abseil Integration
      run: |
        echo "=== Checking Abseil libraries ==="
        find build -name "*absl*" -type f | head -10
        echo "=== Checking duckx library ==="
        find build -name "*duckx*" -type f
        echo "=== Checking test executable ==="
        ls -la build/test/run_gtests || echo "Test executable not found"
        if [ -f "build/test/run_gtests" ]; then
          echo "=== Checking test executable dependencies ==="
          ldd build/test/run_gtests | head -20 || echo "ldd not available"
        fi
        
    - name: Run Tests
      run: |
        cd build
        ctest --output-on-failure --verbose
        
    - name: Run Unified Test Suite
      run: |
        cd build
        cmake --build . --target run_gtests
        cd test
        if [ -f "./run_gtests" ]; then
          ./run_gtests --gtest_brief=1
        else
          echo "❌ Test executable not found"
          ls -la
          exit 1
        fi

  # macOS Build
  build-macos:
    runs-on: macos-14
    timeout-minutes: 45
    strategy:
      matrix:
        build_type: [Debug, Release]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        
    - name: Install dependencies
      run: |
        brew install cmake ninja
        
    - name: Configure CMake with Abseil
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DBUILD_SAMPLES=ON \
          -DBUILD_TESTING=ON \
          -DDUCKX_USE_SYSTEM_ABSL=OFF \
          -DDUCKX_ENABLE_ABSL=ON \
          -G Ninja
        
    - name: Build with Verbose Output
      run: |
        cmake --build build --parallel --verbose
        
    - name: Check Build Artifacts (macOS)
      run: |
        echo "=== Checking build directory structure ==="
        find build -name "*absl*" -o -name "*duckx*" -o -name "run_gtests*" | head -20
        echo "=== Checking test executable ==="
        ls -la build/test/run_gtests || echo "Test executable not found"
        
    - name: Run Tests
      run: |
        cd build
        ctest --output-on-failure --verbose
        
    - name: Run Unified Test Suite
      run: |
        cd build
        cmake --build . --target run_gtests
        cd test
        if [ -f "./run_gtests" ]; then
          ./run_gtests --gtest_brief=1
        else
          echo "❌ Test executable not found"
          ls -la
          exit 1
        fi

  # Code Quality Checks
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential clang-tidy cppcheck
        
    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug -DBUILD_SAMPLES=ON -DBUILD_TESTING=ON -DDUCKX_USE_SYSTEM_ABSL=OFF -DDUCKX_ENABLE_ABSL=ON
        
    - name: Build for Analysis
      run: |
        cmake --build build --parallel
        
    - name: Run Static Analysis (cppcheck)
      run: |
        cppcheck --enable=all --inconclusive --xml --xml-version=2 \
          --suppress=missingIncludeSystem \
          --suppress=unusedFunction \
          include/ src/ 2> cppcheck-report.xml || true
          
    - name: Upload cppcheck results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cppcheck-report
        path: cppcheck-report.xml

  # Documentation Check
  docs-check:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check Documentation Links
      run: |
        # Check if all referenced files exist
        echo "Checking documentation links..."
        
        # Check README links
        if ! [ -f "docs/ROADMAP.md" ]; then
          echo "❌ Missing docs/ROADMAP.md referenced in README"
          exit 1
        fi
        
        if ! [ -f "LICENSE" ]; then
          echo "❌ Missing LICENSE file referenced in README"
          exit 1
        fi
        
        if ! [ -d "samples" ]; then
          echo "❌ Missing samples directory referenced in README"
          exit 1
        fi
        
        echo "✅ All documentation links verified"
        
    - name: Validate Markdown
      run: |
        # Basic markdown validation
        echo "Validating markdown files..."
        find . -name "*.md" -not -path "./thirdparty/*" -exec echo "Checking {}" \;
        echo "✅ Markdown validation complete"

  # Sample Build Test
  samples-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
        
    - name: Configure CMake with Samples
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_SAMPLES=ON -DBUILD_TESTING=OFF -DDUCKX_USE_SYSTEM_ABSL=OFF -DDUCKX_ENABLE_ABSL=ON
        
    - name: Build Samples
      run: |
        cmake --build build --target samples --parallel
        
    - name: Verify Sample Executables
      run: |
        echo "Checking sample executables..."
        ls -la build/samples/
        echo "✅ Sample build verification complete"